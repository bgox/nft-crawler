(()=>{var t={"./node_modules/.pnpm/cash-dom@8.1.0/node_modules/cash-dom/dist/cash.js":
/*!******************************************************************************!*\
  !*** ./node_modules/.pnpm/cash-dom@8.1.0/node_modules/cash-dom/dist/cash.js ***!
  \******************************************************************************/t=>{!function(){"use strict";var e={class:"className",contenteditable:"contentEditable",for:"htmlFor",readonly:"readOnly",maxlength:"maxLength",tabindex:"tabIndex",colspan:"colSpan",rowspan:"rowSpan",usemap:"useMap"};function n(t,e){try{return t(e)}catch(t){return e}}var r=document,o=window,i=r.documentElement,a=r.createElement.bind(r),c=a("div"),u=a("table"),s=a("tbody"),l=a("tr"),f=Array.isArray,d=Array.prototype,h=d.concat,p=d.filter,g=d.indexOf,v=d.map,m=d.push,y=d.slice,w=d.some,b=d.splice,_=/^#(?:[\w-]|\\.|[^\x00-\xa0])*$/,x=/^\.(?:[\w-]|\\.|[^\x00-\xa0])*$/,T=/<.+>/,C=/^\w+$/;function N(t,e){return t&&(O(e)||M(e))?x.test(t)?e.getElementsByClassName(t.slice(1)):C.test(t)?e.getElementsByTagName(t):e.querySelectorAll(t):[]}var k=function(){function t(t,e){if(t){if(L(t))return t;var n=t;if(H(t)){var i=(L(e)?e[0]:e)||r;if(!(n=_.test(t)?i.getElementById(t.slice(1)):T.test(t)?St(t):N(t,i)))return}else if(R(t))return this.ready(t);(n.nodeType||n===o)&&(n=[n]),this.length=n.length;for(var a=0,c=this.length;a<c;a++)this[a]=n[a]}}return t.prototype.init=function(e,n){return new t(e,n)},t}(),F=k.prototype,E=F.init;E.fn=E.prototype=F,F.length=0,F.splice=b,"function"==typeof Symbol&&(F[Symbol.iterator]=d[Symbol.iterator]),F.map=function(t){return E(h.apply([],v.call(this,(function(e,n){return t.call(e,n,e)}))))},F.slice=function(t,e){return E(y.call(this,t,e))};var I=/-([a-z])/g;function S(t){return t.replace(I,(function(t,e){return e.toUpperCase()}))}function A(t,e){var n=t&&(t.matches||t.webkitMatchesSelector||t.msMatchesSelector);return!!n&&!!e&&n.call(t,e)}function L(t){return t instanceof k}function P(t){return!!t&&t===t.window}function O(t){return!!t&&9===t.nodeType}function M(t){return!!t&&1===t.nodeType}function U(t){return"boolean"==typeof t}function R(t){return"function"==typeof t}function H(t){return"string"==typeof t}function D(t){return void 0===t}function W(t){return null===t}function B(t){return!isNaN(parseFloat(t))&&isFinite(t)}function j(t){if("object"!=typeof t||null===t)return!1;var e=Object.getPrototypeOf(t);return null===e||e===Object.prototype}function q(t,e,n){if(n){for(var r=t.length;r--;)if(!1===e.call(t[r],r,t[r]))return t}else if(j(t))for(var o=Object.keys(t),i=(r=0,o.length);r<i;r++){var a=o[r];if(!1===e.call(t[a],a,t[a]))return t}else for(r=0,i=t.length;r<i;r++)if(!1===e.call(t[r],r,t[r]))return t;return t}function $(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=!!U(t[0])&&t.shift(),r=t.shift(),o=t.length;if(!r)return{};if(!o)return $(n,E,r);for(var i=0;i<o;i++){var a=t[i];for(var c in a)n&&(f(a[c])||j(a[c]))?(r[c]&&r[c].constructor===a[c].constructor||(r[c]=new a[c].constructor),$(n,r[c],a[c])):r[c]=a[c]}return r}function z(t){return H(t)?function(e,n){return A(n,t)}:R(t)?t:L(t)?function(e,n){return t.is(n)}:t?function(e,n){return n===t}:function(){return!1}}function V(t,e){return e?t.filter(e):t}E.guid=1,E.isWindow=P,E.isFunction=R,E.isArray=f,E.isNumeric=B,E.isPlainObject=j,F.get=function(t){return D(t)?y.call(this):this[(t=Number(t))<0?t+this.length:t]},F.eq=function(t){return E(this.get(t))},F.first=function(){return this.eq(0)},F.last=function(){return this.eq(-1)},E.each=q,F.each=function(t){return q(this,t)},F.prop=function(t,n){if(t){if(H(t))return t=e[t]||t,arguments.length<2?this[0]&&this[0][t]:this.each((function(e,r){r[t]=n}));for(var r in t)this.prop(r,t[r]);return this}},F.removeProp=function(t){return this.each((function(n,r){delete r[e[t]||t]}))},E.extend=$,F.extend=function(t){return $(F,t)},F.filter=function(t){var e=z(t);return E(p.call(this,(function(t,n){return e.call(t,n,t)})))};var X=/\S+/g;function G(t){return H(t)&&t.match(X)||[]}function J(t,e,n,r){for(var o=[],i=R(e),a=r&&z(r),c=0,u=t.length;c<u;c++)if(i){var s=e(t[c]);s.length&&m.apply(o,s)}else for(var l=t[c][e];!(null==l||r&&a(-1,l));)o.push(l),l=n?l[e]:null;return o}function Y(t){return t.length>1?p.call(t,(function(t,e,n){return g.call(n,t)===e})):t}function Z(t,e,n){if(M(t)){var r=o.getComputedStyle(t,null);return n?r.getPropertyValue(e)||void 0:r[e]||t.style[e]}}function K(t,e){return parseInt(Z(t,e),10)||0}F.hasClass=function(t){return!!t&&w.call(this,(function(e){return M(e)&&e.classList.contains(t)}))},F.removeAttr=function(t){var e=G(t);return this.each((function(t,n){M(n)&&q(e,(function(t,e){n.removeAttribute(e)}))}))},F.attr=function(t,e){if(t){if(H(t)){if(arguments.length<2){if(!this[0]||!M(this[0]))return;var n=this[0].getAttribute(t);return W(n)?void 0:n}return D(e)?this:W(e)?this.removeAttr(t):this.each((function(n,r){M(r)&&r.setAttribute(t,e)}))}for(var r in t)this.attr(r,t[r]);return this}},F.toggleClass=function(t,e){var n=G(t),r=!D(e);return this.each((function(t,o){M(o)&&q(n,(function(t,n){r?e?o.classList.add(n):o.classList.remove(n):o.classList.toggle(n)}))}))},F.addClass=function(t){return this.toggleClass(t,!0)},F.removeClass=function(t){return arguments.length?this.toggleClass(t,!1):this.attr("class","")},E.unique=Y,F.add=function(t,e){return E(Y(this.get().concat(E(t,e).get())))};var Q=/^--/;function tt(t){return Q.test(t)}var et={},nt=c.style,rt=["webkit","moz","ms"];function ot(t,e){if(void 0===e&&(e=tt(t)),e)return t;if(!et[t]){var n=S(t),r=""+n[0].toUpperCase()+n.slice(1);q((n+" "+rt.join(r+" ")+r).split(" "),(function(e,n){if(n in nt)return et[t]=n,!1}))}return et[t]}var it={animationIterationCount:!0,columnCount:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0};function at(t,e,n){return void 0===n&&(n=tt(t)),n||it[t]||!B(e)?e:e+"px"}F.css=function(t,e){if(H(t)){var n=tt(t);return t=ot(t,n),arguments.length<2?this[0]&&Z(this[0],t,n):t?(e=at(t,e,n),this.each((function(r,o){M(o)&&(n?o.style.setProperty(t,e):o.style[t]=e)}))):this}for(var r in t)this.css(r,t[r]);return this};var ct=/^\s+|\s+$/;function ut(t,e){var r=t.dataset[e]||t.dataset[S(e)];return ct.test(r)?r:n(JSON.parse,r)}function st(t,e,r){r=n(JSON.stringify,r),t.dataset[S(e)]=r}function lt(t,e){var n=t.documentElement;return Math.max(t.body["scroll"+e],n["scroll"+e],t.body["offset"+e],n["offset"+e],n["client"+e])}function ft(t,e){return K(t,"border"+(e?"Left":"Top")+"Width")+K(t,"padding"+(e?"Left":"Top"))+K(t,"padding"+(e?"Right":"Bottom"))+K(t,"border"+(e?"Right":"Bottom")+"Width")}F.data=function(t,e){if(!t){if(!this[0])return;var n={};for(var r in this[0].dataset)n[r]=ut(this[0],r);return n}if(H(t))return arguments.length<2?this[0]&&ut(this[0],t):D(e)?this:this.each((function(n,r){st(r,t,e)}));for(var r in t)this.data(r,t[r]);return this},q([!0,!1],(function(t,e){q(["Width","Height"],(function(t,n){F[(e?"outer":"inner")+n]=function(r){if(this[0])return P(this[0])?e?this[0]["inner"+n]:this[0].document.documentElement["client"+n]:O(this[0])?lt(this[0],n):this[0][(e?"offset":"client")+n]+(r&&e?K(this[0],"margin"+(t?"Top":"Left"))+K(this[0],"margin"+(t?"Bottom":"Right")):0)}}))})),q(["Width","Height"],(function(t,e){var n=e.toLowerCase();F[n]=function(r){if(!this[0])return D(r)?void 0:this;if(!arguments.length)return P(this[0])?this[0].document.documentElement["client"+e]:O(this[0])?lt(this[0],e):this[0].getBoundingClientRect()[n]-ft(this[0],!t);var o=parseInt(r,10);return this.each((function(e,r){if(M(r)){var i=Z(r,"boxSizing");r.style[n]=at(n,o+("border-box"===i?ft(r,!t):0))}}))}}));var dt={};function ht(t){return"none"===Z(t,"display")}function pt(t,e){return!e||!w.call(e,(function(e){return t.indexOf(e)<0}))}F.toggle=function(t){return this.each((function(e,n){M(n)&&((D(t)?ht(n):t)?(n.style.display=n.___cd||"",ht(n)&&(n.style.display=function(t){if(dt[t])return dt[t];var e=a(t);r.body.insertBefore(e,null);var n=Z(e,"display");return r.body.removeChild(e),dt[t]="none"!==n?n:"block"}(n.tagName))):(n.___cd=Z(n,"display"),n.style.display="none"))}))},F.hide=function(){return this.toggle(!1)},F.show=function(){return this.toggle(!0)};var gt={focus:"focusin",blur:"focusout"},vt={mouseenter:"mouseover",mouseleave:"mouseout"},mt=/^(mouse|pointer|contextmenu|drag|drop|click|dblclick)/i;function yt(t){return vt[t]||gt[t]||t}function wt(t){return t.___ce=t.___ce||{}}function bt(t){var e=t.split(".");return[e[0],e.slice(1).sort()]}function _t(t,e,n,r,o){var i=wt(t);if(e)i[e]&&(i[e]=i[e].filter((function(i){var a=i[0],c=i[1],u=i[2];if(o&&u.guid!==o.guid||!pt(a,n)||r&&r!==c)return!0;t.removeEventListener(e,u)})));else for(e in i)_t(t,e,n,r,o)}function xt(t){return t.multiple&&t.options?J(p.call(t.options,(function(t){return t.selected&&!t.disabled&&!t.parentNode.disabled})),"value"):t.value||""}F.off=function(t,e,n){var r=this;if(D(t))this.each((function(t,e){(M(e)||O(e)||P(e))&&_t(e)}));else if(H(t))R(e)&&(n=e,e=""),q(G(t),(function(t,o){var i=bt(o),a=i[0],c=i[1],u=yt(a);r.each((function(t,r){(M(r)||O(r)||P(r))&&_t(r,u,c,e,n)}))}));else for(var o in t)this.off(o,t[o]);return this},F.on=function(t,e,n,r,o){var i=this;if(!H(t)){for(var a in t)this.on(a,e,n,t[a],o);return this}return H(e)||(D(e)||W(e)?e="":D(n)?(n=e,e=""):(r=n,n=e,e="")),R(r)||(r=n,n=void 0),r?(q(G(t),(function(t,a){var c=bt(a),u=c[0],s=c[1],l=yt(u),f=u in vt,d=u in gt;l&&i.each((function(t,i){if(M(i)||O(i)||P(i)){var a=function t(a){if(a.target["___i"+a.type])return a.stopImmediatePropagation();if((!a.namespace||pt(s,a.namespace.split(".")))&&(e||!(d&&(a.target!==i||a.___ot===l)||f&&a.relatedTarget&&i.contains(a.relatedTarget)))){var c=i;if(e){for(var u=a.target;!A(u,e);){if(u===i)return;if(!(u=u.parentNode))return}c=u,a.___cd=!0}a.___cd&&Object.defineProperty(a,"currentTarget",{configurable:!0,get:function(){return c}}),Object.defineProperty(a,"data",{configurable:!0,get:function(){return n}});var h=r.call(c,a,a.___td);o&&_t(i,l,s,e,t),!1===h&&(a.preventDefault(),a.stopPropagation())}};a.guid=r.guid=r.guid||E.guid++,function(t,e,n,r,o){var i=wt(t);i[e]=i[e]||[],i[e].push([n,r,o]),t.addEventListener(e,o)}(i,l,s,e,a)}}))})),this):this},F.one=function(t,e,n,r){return this.on(t,e,n,r,!0)},F.ready=function(t){var e=function(){return setTimeout(t,0,E)};return"loading"!==r.readyState?e():r.addEventListener("DOMContentLoaded",e),this},F.trigger=function(t,e){if(H(t)){var n=bt(t),o=n[0],i=n[1],a=yt(o);if(!a)return this;var c=mt.test(a)?"MouseEvents":"HTMLEvents";(t=r.createEvent(c)).initEvent(a,!0,!0),t.namespace=i.join("."),t.___ot=o}t.___td=e;var u=t.___ot in gt;return this.each((function(e,n){u&&R(n[t.___ot])&&(n["___i"+t.type]=!0,n[t.___ot](),n["___i"+t.type]=!1),n.dispatchEvent(t)}))};var Tt=/%20/g,Ct=/\r?\n/g;var Nt=/file|reset|submit|button|image/i,kt=/radio|checkbox/i;F.serialize=function(){var t="";return this.each((function(e,n){q(n.elements||[n],(function(e,n){if(!(n.disabled||!n.name||"FIELDSET"===n.tagName||Nt.test(n.type)||kt.test(n.type)&&!n.checked)){var r=xt(n);if(!D(r))q(f(r)?r:[r],(function(e,r){t+=function(t,e){return"&"+encodeURIComponent(t)+"="+encodeURIComponent(e.replace(Ct,"\r\n")).replace(Tt,"+")}(n.name,r)}))}}))})),t.slice(1)},F.val=function(t){return arguments.length?this.each((function(e,n){var r=n.multiple&&n.options;if(r||kt.test(n.type)){var o=f(t)?v.call(t,String):W(t)?[]:[String(t)];r?q(n.options,(function(t,e){e.selected=o.indexOf(e.value)>=0}),!0):n.checked=o.indexOf(n.value)>=0}else n.value=D(t)||W(t)?"":t})):this[0]&&xt(this[0])},F.clone=function(){return this.map((function(t,e){return e.cloneNode(!0)}))},F.detach=function(t){return V(this,t).each((function(t,e){e.parentNode&&e.parentNode.removeChild(e)})),this};var Ft=/^\s*<(\w+)[^>]*>/,Et=/^<(\w+)\s*\/?>(?:<\/\1>)?$/,It={"*":c,tr:s,td:l,th:l,thead:u,tbody:u,tfoot:u};function St(t){if(!H(t))return[];if(Et.test(t))return[a(RegExp.$1)];var e=Ft.test(t)&&RegExp.$1,n=It[e]||It["*"];return n.innerHTML=t,E(n.childNodes).detach().get()}E.parseHTML=St,F.empty=function(){return this.each((function(t,e){for(;e.firstChild;)e.removeChild(e.firstChild)}))},F.html=function(t){return arguments.length?D(t)?this:this.each((function(e,n){M(n)&&(n.innerHTML=t)})):this[0]&&this[0].innerHTML},F.remove=function(t){return V(this,t).detach().off(),this},F.text=function(t){return D(t)?this[0]?this[0].textContent:"":this.each((function(e,n){M(n)&&(n.textContent=t)}))},F.unwrap=function(){return this.parent().each((function(t,e){if("BODY"!==e.tagName){var n=E(e);n.replaceWith(n.children())}})),this},F.offset=function(){var t=this[0];if(t){var e=t.getBoundingClientRect();return{top:e.top+o.pageYOffset,left:e.left+o.pageXOffset}}},F.offsetParent=function(){return this.map((function(t,e){for(var n=e.offsetParent;n&&"static"===Z(n,"position");)n=n.offsetParent;return n||i}))},F.position=function(){var t=this[0];if(t){var e="fixed"===Z(t,"position"),n=e?t.getBoundingClientRect():this.offset();if(!e){for(var r=t.ownerDocument,o=t.offsetParent||r.documentElement;(o===r.body||o===r.documentElement)&&"static"===Z(o,"position");)o=o.parentNode;if(o!==t&&M(o)){var i=E(o).offset();n.top-=i.top+K(o,"borderTopWidth"),n.left-=i.left+K(o,"borderLeftWidth")}}return{top:n.top-K(t,"marginTop"),left:n.left-K(t,"marginLeft")}}},F.children=function(t){return V(E(Y(J(this,(function(t){return t.children})))),t)},F.contents=function(){return E(Y(J(this,(function(t){return"IFRAME"===t.tagName?[t.contentDocument]:"TEMPLATE"===t.tagName?t.content.childNodes:t.childNodes}))))},F.find=function(t){return E(Y(J(this,(function(e){return N(t,e)}))))};var At=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,Lt=/^$|^module$|\/(java|ecma)script/i,Pt=["type","src","nonce","noModule"];function Ot(t,e,n,r,o){r?t.insertBefore(e,n?t.firstChild:null):t.parentNode.insertBefore(e,n?t:t.nextSibling),o&&function(t,e){var n=E(t);n.filter("script").add(n.find("script")).each((function(t,n){if(Lt.test(n.type)&&i.contains(n)){var r=a("script");r.text=n.textContent.replace(At,""),q(Pt,(function(t,e){n[e]&&(r[e]=n[e])})),e.head.insertBefore(r,null),e.head.removeChild(r)}}))}(e,t.ownerDocument)}function Mt(t,e,n,r,o,i,a,c){return q(t,(function(t,i){q(E(i),(function(t,i){q(E(e),(function(e,a){var c=n?a:i,u=n?t:e;Ot(n?i:a,u?c.cloneNode(!0):c,r,o,!u)}),c)}),a)}),i),e}F.after=function(){return Mt(arguments,this,!1,!1,!1,!0,!0)},F.append=function(){return Mt(arguments,this,!1,!1,!0)},F.appendTo=function(t){return Mt(arguments,this,!0,!1,!0)},F.before=function(){return Mt(arguments,this,!1,!0)},F.insertAfter=function(t){return Mt(arguments,this,!0,!1,!1,!1,!1,!0)},F.insertBefore=function(t){return Mt(arguments,this,!0,!0)},F.prepend=function(){return Mt(arguments,this,!1,!0,!0,!0,!0)},F.prependTo=function(t){return Mt(arguments,this,!0,!0,!0,!1,!1,!0)},F.replaceWith=function(t){return this.before(t).remove()},F.replaceAll=function(t){return E(t).replaceWith(this),this},F.wrapAll=function(t){for(var e=E(t),n=e[0];n.children.length;)n=n.firstElementChild;return this.first().before(e),this.appendTo(n)},F.wrap=function(t){return this.each((function(e,n){var r=E(t)[0];E(n).wrapAll(e?r.cloneNode(!0):r)}))},F.wrapInner=function(t){return this.each((function(e,n){var r=E(n),o=r.contents();o.length?o.wrapAll(t):r.append(t)}))},F.has=function(t){var e=H(t)?function(e,n){return N(t,n).length}:function(e,n){return n.contains(t)};return this.filter(e)},F.is=function(t){var e=z(t);return w.call(this,(function(t,n){return e.call(t,n,t)}))},F.next=function(t,e,n){return V(E(Y(J(this,"nextElementSibling",e,n))),t)},F.nextAll=function(t){return this.next(t,!0)},F.nextUntil=function(t,e){return this.next(e,!0,t)},F.not=function(t){var e=z(t);return this.filter((function(n,r){return(!H(t)||M(r))&&!e.call(r,n,r)}))},F.parent=function(t){return V(E(Y(J(this,"parentNode"))),t)},F.index=function(t){var e=t?E(t)[0]:this[0],n=t?this:E(e).parent().children();return g.call(n,e)},F.closest=function(t){var e=this.filter(t);if(e.length)return e;var n=this.parent();return n.length?n.closest(t):e},F.parents=function(t,e){return V(E(Y(J(this,"parentElement",!0,e))),t)},F.parentsUntil=function(t,e){return this.parents(e,t)},F.prev=function(t,e,n){return V(E(Y(J(this,"previousElementSibling",e,n))),t)},F.prevAll=function(t){return this.prev(t,!0)},F.prevUntil=function(t,e){return this.prev(e,!0,t)},F.siblings=function(t){return V(E(Y(J(this,(function(t){return E(t).parent().children().not(t)})))),t)},t.exports=E}()},"./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function a(t){try{u(r.next(t))}catch(t){i(t)}}function c(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,c)}u((r=r.apply(t,e||[])).next())}))},o=this&&this.__generator||function(t,e){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=a.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=e.call(t,a)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}},i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var a=n(/*! ./utils */"./src/utils/index.ts"),c=i(n(/*! cash-dom */"./node_modules/.pnpm/cash-dom@8.1.0/node_modules/cash-dom/dist/cash.js"));window.__dataverseNftCrawler={getNft:function(t){return r(void 0,void 0,void 0,(function(){return o(this,(function(e){switch(e.label){case 0:switch(t.platform.toLocaleLowerCase()){case"opensea":return[3,1];case"superrare":return[3,3];case"zora":return[3,5];case"foundation":return[3,7];case"twitter":return[3,9];case"rarible":return[3,11];case"niftygateway":return[3,13];case"asyncart":return[3,15]}return[3,17];case 1:return[4,window.__dataverseNftCrawler.opensea()];case 2:return[2,e.sent()];case 3:return[4,window.__dataverseNftCrawler.superrare(t.data)];case 4:return[2,e.sent()];case 5:return[4,window.__dataverseNftCrawler.zora()];case 6:return[2,e.sent()];case 7:return[4,window.__dataverseNftCrawler.foundation()];case 8:return[2,e.sent()];case 9:return[4,window.__dataverseNftCrawler.twitter()];case 10:return[2,e.sent()];case 11:return[4,window.__dataverseNftCrawler.rarible()];case 12:return[2,e.sent()];case 13:return[4,window.__dataverseNftCrawler.niftygateway()];case 14:return[2,e.sent()];case 15:return[4,window.__dataverseNftCrawler.asyncart()];case 16:return[2,e.sent()];case 17:return[3,18];case 18:return[2]}}))}))},opensea:function(){return r(void 0,void 0,void 0,(function(){var t,e;return o(this,(function(n){return t={contract:"",tokenId:"",platformUrl:location.href},e={code:-1,data:t},location.href.startsWith("https://opensea.io/assets/0x")?(t.contract=(0,a.extractHex)(location.href),t.tokenId=location.href.split("?")[0].split(":")[1].split("/")[5],0===t.contract.length||0===t.tokenId.length?(e.code=-1,e.data={msgType:"notFoundNFT",msgContent:""}):(e.code=0,e.data=t)):location.href.includes("https://opensea.io/assets/matic/0x")||location.href.includes("https://opensea.io/assets/klaytn/0x")?(e.code=-1,e.data={msgType:"notSupportChain",msgContent:""}):(e.code=-1,e.data={msgType:"geNFTFromDetailPage",msgContent:""}),[2,e]}))}))},superrare:function(t){return r(void 0,void 0,void 0,(function(){var e,n,r,i,a,u,s;return o(this,(function(o){e={contract:"",tokenId:"",platformUrl:location.href},n={code:-1,data:e},r="<a href='"+t.url+"' target='_blank'>[view tx]</a>",i=(0,c.default)(t.dom);try{return(a=(0,c.default)(i).find("#myTabContent #eventlog .card-body .media .media-body dl"))&&0!==a.length?(u=(0,c.default)(a[a.length-2]).find("dd ul li"),s=(0,c.default)(u[u.length-1]).find("span").last().find("a"),u=(0,c.default)(a[a.length-((s&&s.length)>0?1:2)]).find("dd ul li"),e.contract=(0,c.default)(a[0]).find("dd").children("a").text(),e.tokenId=(0,c.default)(u[u.length-1]).find("span").last().text(),0===e.contract.length||0===e.tokenId.length?(n.code=-1,n.data={msgType:"notFoundNFT",msgContent:""},[2,n]):(n.code=0,n.data=e,[2,n])):(n.code=-1,n.data={msgType:"validViewTX",msgContent:r},[2,n])}catch(t){return n.code=-1,n.data={msgType:"validViewTX",msgContent:r},[2,n]}return[2]}))}))},superrareEtherscanUrl:function(){return r(void 0,void 0,void 0,(function(){var t,e,n,r,i;return o(this,(function(o){return t={code:-1,data:""},".collectible-history-section > .collectible-history-item > .collectible-history-item-link",(e=document.querySelectorAll(".collectible-history-section > .collectible-history-item > .collectible-history-item-link"))?(n=null!==(i=e[e.length-1].href)&&void 0!==i?i:"",r=n+"#eventlog",t.code=0,t.data=r,[2,t]):(t.code=-1,t.data={msgType:"geNFTFromDetailPage",msgContent:""},[2,t])}))}))},zora:function(){return r(void 0,void 0,void 0,(function(){var t,e,n,r,i,c;return o(this,(function(o){return t={contract:"",tokenId:"",platformUrl:location.href},e={code:-1,data:t},(n=document.querySelector(".css-rxk9pl a"))?(r=null!==(i=n.href)&&void 0!==i?i:"",t.contract=null!==(c=(0,a.extractHex)(r))&&void 0!==c?c:"",t.tokenId=r.split("=")[1],0===t.contract.length||0===t.tokenId.length?(e.code=-1,e.data={msgType:"notFoundNFT",msgContent:""}):(e.code=0,e.data=t)):(e.code=-1,e.data={msgType:"geNFTFromDetailPage",msgContent:""}),[2,e]}))}))},foundation:function(){return r(void 0,void 0,void 0,(function(){var t,e,n,r,i;return o(this,(function(o){return t={contract:"",tokenId:"",platformUrl:location.href},e={code:-1,data:t},(n=document.querySelector(".css-1hhedd7 a"))?(r=null!==(i=n.href)&&void 0!==i?i:"",t.contract=(0,a.extractHex)(r),t.tokenId=r.split("=")[1],0===t.contract.length||0===t.tokenId.length?(e.code=-1,e.data={msgType:"notFoundNFT",msgContent:""}):(e.code=0,e.data=t)):(e.code=-1,e.data={msgType:"geNFTFromDetailPage",msgContent:""}),[2,e]}))}))},twitter:function(){return r(void 0,void 0,void 0,(function(){return o(this,(function(t){return{contract:"",tokenId:"",platformUrl:location.href},[2,{code:-1,data:{msgType:"notFoundNFT",msgContent:""}}]}))}))},rarible:function(){return r(void 0,void 0,void 0,(function(){var t,e,n;return o(this,(function(r){if(t={contract:"",tokenId:"",platformUrl:location.href},e={code:-1,data:t},location.href.startsWith("https://rarible.com/token/0x"))try{t.contract=(0,a.extractHex)(location.href),n=location.href.split("?")[0].split(":"),t.tokenId=n[n.length-1],0===t.contract.length||0===t.tokenId.length?(e.code=-1,e.data={msgType:"notFoundNFT",msgContent:""}):(e.code=0,e.data=t)}catch(t){e.code=-1,e.data={msgType:"notFoundNFT",msgContent:""}}else e.code=-1,e.data={msgType:"geNFTFromDetailPage",msgContent:""};return[2,e]}))}))},niftygateway:function(){return r(void 0,void 0,void 0,(function(){var t,e,n,r,i;return o(this,(function(o){if(t={contract:"",tokenId:"",platformUrl:location.href},e={code:-1,data:t},location.href.startsWith("https://niftygateway.com/itemdetail/secondary/0x"))try{t.contract=(0,a.extractHex)(location.href),n=location.href.split("/"),t.tokenId=n[n.length-1],0===t.contract.length||0===t.tokenId.length?(e.code=-1,e.data={msgType:"notFoundNFT",msgContent:""}):(e.code=0,e.data=t)}catch(t){e.code=-1,e.data={msgType:"notFoundNFT",msgContent:""}}else if(location.href.startsWith("https://niftygateway.com/marketplace?collection=0x")&&location.href.includes("tokenId"))try{t.contract=(0,a.extractHex)(location.href),r=null===(i=location.href.match(/&tokenId=\d+/))||void 0===i?void 0:i[0],t.tokenId=void 0!==r?r.split("=")[1]:"",0===t.contract.length||0===t.tokenId.length?(e.code=-1,e.data={msgType:"notFoundNFT",msgContent:""}):(e.code=0,e.data=t)}catch(t){e.code=-1,e.data={msgType:"notFoundNFT",msgContent:""}}else location.href.startsWith("https://niftygateway.com/itemdetail/primary/0x")?(e.code=-1,e.data={msgType:"notSupportAtCurrentPage",msgContent:""}):(e.code=-1,e.data={msgType:"geNFTFromDetailPage",msgContent:""});return[2,e]}))}))},asyncart:function(){return r(void 0,void 0,void 0,(function(){var t,e,n;return o(this,(function(r){t={contract:"",tokenId:"",platformUrl:location.href},e={code:-1,data:t};try{t.contract=(0,a.extractHex)(location.href),n=location.href.split("/"),t.tokenId=n[n.length-1].split("-")[1],0===t.contract.length||0===t.tokenId.length?(e.code=-1,e.data={msgType:"notFoundNFT",msgContent:""}):(e.code=0,e.data=t)}catch(t){e.code=-1,e.data={msgType:"geNFTFromDetailPage",msgContent:""}}return[2,e]}))}))}};window.addEventListener("message",(function(t){return r(void 0,void 0,void 0,(function(){var e,n,r;return o(this,(function(o){switch(o.label){case 0:return t.data.msgType&&"fetchNftRequest"===t.data.msgType?(e=t.data.platform,[4,window.__dataverseNftCrawler.getNft(t.data)]):[3,2];case 1:n=o.sent(),r={msgType:"fetchNftResponse",platform:e,data:n},window.postMessage(r,"*"),o.label=2;case 2:return t.data.msgType&&"fetchSuperrareEtherscanUrlRequest"===t.data.msgType?[4,window.__dataverseNftCrawler.superrareEtherscanUrl()]:[3,4];case 3:n=o.sent(),r={msgType:"fetchSuperrareEtherscanUrlResponse",data:n},window.postMessage(r,"*"),o.label=4;case 4:return[2]}}))}))}),!1)},"./src/utils/index.ts":
/*!****************************!*\
  !*** ./src/utils/index.ts ***!
  \****************************/(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.extractHex=void 0,e.extractHex=function(t){var e;return null===(e=t.match(/0x[\dA-Za-z]+/))||void 0===e?void 0:e[0]}}},e={};(function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={exports:{}};return t[r].call(i.exports,i,i.exports,n),i.exports})("./src/index.ts")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,